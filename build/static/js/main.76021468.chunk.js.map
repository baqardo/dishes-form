{"version":3,"sources":["components/Button/Button.js","components/Field/Field.js","components/Spinner/Spinner.js","shared/utility.js","assets/svg/logo.svg","assets/svg/wave.svg","containers/Form/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","disabled","children","Field","classes","invalid","fieldTemplates","input","id","elementConfig","value","onChange","changed","required","select","options","map","option","displayValue","htmlFor","placeholder","elementType","Spinner","checkFieldValidity","rules","isValid","isRequired","toString","trim","minLength","length","maxLength","min","max","isNumeric","test","isFloat","testedValue","parseFloat","isNaN","isProperCategory","category","globalCategory","formatFieldValue","type","formattedValue","Number","Form","state","isLoading","error","dishForm","name","validation","isTouched","preparation_time","step","no_of_slices","diameter","spiciness_scale","slices_of_bread","fieldChangeHandler","event","formElementID","updatedDishForm","updatedFormElement","fieldType","fieldValue","target","updatedGlobalCategory","setState","isFormValid","submitHandler","preventDefault","dataToSend","giveDataToSend","sendDishData","form","fieldID","fieldCategory","this","time","field","data","a","fetch","body","JSON","stringify","headers","method","response","ok","json","responseData","resetFieldsValue","console","log","key","message","formElements","push","config","elementsToRender","formElement","onSubmit","src","waveImage","alt","logoImage","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8WAUeA,EANA,SAAAC,GAAK,OAClB,wBAAQC,UAAU,SAASC,SAAUF,EAAME,SAA3C,SACGF,EAAMG,YCqCIC,G,MAvCD,SAAAJ,GACZ,IAAIK,EAAU,eAEVL,EAAMM,UAASD,GAAW,0BAE9B,IAAME,EAAiB,CACrBC,MAAO,kBACL,+CACEP,UAAWI,EACXI,GAAIT,EAAMS,IACNT,EAAMU,eAHZ,IAIEC,MAAOX,EAAMW,MACbC,SAAUZ,EAAMa,QAChBC,UAAQ,MAGZC,OAAQ,kBACN,wBAAQd,UAAU,oCAAoCQ,GAAIT,EAAMS,GAAIE,MAAOX,EAAMW,MAAOC,SAAUZ,EAAMa,QAAxG,SACGb,EAAMU,cAAcM,QAAQC,KAAI,SAAAC,GAAM,OACrC,wBAAQjB,UAAU,gBAAmCU,MAAOO,EAAOP,MAAnE,SACGO,EAAOC,cAD6BD,EAAOP,cAiBtD,OARE,qCACE,uBAAOV,UAAU,eAAemB,QAASpB,EAAMS,GAA/C,SACGT,EAAMU,cAAcW,cAEtBd,EAAeP,EAAMsB,oBC9BbC,G,MAFC,SAAAvB,GAAK,OAAI,qBAAKC,UAAU,SAAf,0BCJZuB,EAAqB,SAACb,EAAOc,GACxC,IAAIC,GAAU,EAsBd,GApBID,EAAME,aACRD,EAAsC,KAA5Bf,EAAMiB,WAAWC,QAAiBH,GAG1CD,EAAMK,YACRJ,EAAUf,EAAMoB,QAAUN,EAAMK,WAAaJ,GAG3CD,EAAMO,YACRN,EAAUf,EAAMoB,QAAUN,EAAMO,WAAaN,GAG3CD,EAAMQ,MACRP,EAAUf,GAASc,EAAMQ,KAAOP,GAG9BD,EAAMS,MACRR,EAAUf,GAASc,EAAMS,KAAOR,GAG9BD,EAAMU,UAAW,CAEnBT,EADgB,QACEU,KAAKzB,IAAUe,EAGnC,GAAID,EAAMY,QAAS,CACjB,IAAMC,EAAcC,WAAW5B,GAC/Be,GAAWc,MAAMF,IAAgBZ,EAGnC,OAAOA,GAYIe,EAAmB,SAACC,EAAUC,GACzC,MAAiB,YAAbD,GAA0BA,IAAaC,GAKhCC,EAAmB,SAACjC,EAAOkC,GACtC,IAAIC,EAAiBnC,EAIrB,MAFa,WAATkC,IAAmBC,EAjBhBC,OAiBiDpC,IAEjDmC,GCxDM,G,MAAA,IAA0B,kCCA1B,MAA0B,iCCiT1BE,E,4MApSbC,MAAQ,CACNC,WAAW,EACXxB,SAAS,EACTiB,eAAgB,QAChBQ,MAAO,KACPC,SAAU,CACRC,KAAM,CACJ/B,YAAa,QACbZ,cAAe,CACbmC,KAAM,OACNxB,YAAa,YACbS,UAAW,KAEbnB,MAAO,GACP2C,WAAY,CACV3B,YAAY,EACZG,UAAW,GAEbJ,SAAS,EACT6B,WAAW,EACXb,SAAU,WAEZc,iBAAkB,CAChBlC,YAAa,QACbZ,cAAe,CACbmC,KAAM,OACNxB,YAAa,mBACboC,KAAM,KAER9C,MAAO,WACP2C,WAAY,CACV3B,YAAY,GAEdD,SAAS,EACT6B,WAAW,EACXb,SAAU,WAEZG,KAAM,CACJvB,YAAa,SACbZ,cAAe,CACbM,QAAS,CACP,CAAEL,MAAO,QAASQ,aAAc,SAChC,CAAER,MAAO,OAAQQ,aAAc,QAC/B,CAAER,MAAO,WAAYQ,aAAc,aAErCE,YAAa,aAEfV,MAAO,QACP2C,WAAY,CACV3B,YAAY,GAEdD,SAAS,EACT6B,WAAW,EACXb,SAAU,WAEZgB,aAAc,CACZpC,YAAa,QACbZ,cAAe,CACbmC,KAAM,SACNxB,YAAa,mBACbY,IAAK,GAEPtB,MAAO,GACP2C,WAAY,CACV3B,YAAY,EACZQ,WAAW,EACXF,IAAK,GAEPP,SAAS,EACT6B,WAAW,EACXb,SAAU,SAEZiB,SAAU,CACRrC,YAAa,QACbZ,cAAe,CACbmC,KAAM,SACNxB,YAAa,WACboC,KAAM,OACNxB,IAAK,QAEPtB,MAAO,GACP2C,WAAY,CACV3B,YAAY,EACZU,SAAS,EACTJ,IAAK,KAEPP,SAAS,EACT6B,WAAW,EACXb,SAAU,SAEZkB,gBAAiB,CACftC,YAAa,QACbZ,cAAe,CACbmC,KAAM,SACNxB,YAAa,kBACbY,IAAK,IACLC,IAAK,MAEPvB,MAAO,GACP2C,WAAY,CACV3B,YAAY,EACZQ,WAAW,EACXF,IAAK,EACLC,IAAK,IAEPR,SAAS,EACT6B,WAAW,EACXb,SAAU,QAEZmB,gBAAiB,CACfvC,YAAa,QACbZ,cAAe,CACbmC,KAAM,SACNxB,YAAa,mBACbY,IAAK,KAEPtB,MAAO,GACP2C,WAAY,CACV3B,YAAY,EACZQ,WAAW,EACXF,IAAK,GAEPP,SAAS,EACT6B,WAAW,EACXb,SAAU,c,EAKhBoB,mBAAqB,SAACC,EAAOC,GAC3B,IAAMC,EAAe,eAAQ,EAAKhB,MAAMG,UAClCc,EAAkB,eAAQD,EAAgBD,IAE1CG,EAAYD,EAAmBxD,cAAcmC,KAC7CuB,EAAaxB,EAAiBmB,EAAMM,OAAO1D,MAAOwD,GAExDD,EAAmBxC,QAAUF,EAAmB4C,EAAYF,EAAmBZ,YAC/EY,EAAmBvD,MAAQyD,EAC3BF,EAAmBX,WAAY,EAE/BU,EAAgBD,GAAiBE,EAEjC,IAAII,EAAwB,EAAKrB,MAAMN,eACjB,SAAlBqB,IAA0BM,EAAwBJ,EAAmBvD,OAEzE,EAAK4D,SAAS,CACZnB,SAAUa,EACVtB,eAAgB2B,EAChB5C,QAAS,EAAK8C,YAAYP,EAAiBK,M,EAI/CG,cAAgB,SAAAV,GAEd,GADAA,EAAMW,iBACD,EAAKzB,MAAMvB,QAAhB,CAEA,EAAK6C,SAAS,CAAErB,WAAW,IAE3B,IAAIyB,EAAa,EAAKC,iBACtB,EAAKC,aAAaF,K,iDAGpB,SAAYG,EAAMnC,GAChB,IAAI6B,GAAc,EAClB,IAAK,IAAIO,KAAWD,EAAM,CACxB,IAAME,EAAgBC,KAAKhC,MAAMG,SAAS2B,GAASrC,SAE9CD,EAAiBuC,EAAerC,KAErC6B,EAAcM,EAAKC,GAASrD,SAAW8C,GAGzC,OAAOA,I,4BAGT,WACE,IHrJsBU,EGqJhBP,EAAa,GAEnB,IAAK,IAAMI,KAAWE,KAAKhC,MAAMG,SAAU,CACzC,IAAM+B,EAAQF,KAAKhC,MAAMG,SAAS2B,GAC5BC,EAAgBG,EAAMzC,SAEvBD,EAAiBuC,EAAeC,KAAKhC,MAAMN,kBAEZgC,EAAWI,GAA/B,qBAAZA,GH7JgBG,EG6JiDC,EAAMxE,OH5JtEoB,OAAS,EAAUmD,EAAO,MACvBA,EG4JmBC,EAAMxE,OAGnC,OAAOgE,I,iEAGT,WAAmBS,GAAnB,yBAAAC,EAAA,+EAE2BC,MAAM,qDAAsD,CACjFC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACP,eAAgB,oBAElBC,OAAQ,SAPd,UAEUC,EAFV,OAUQzC,EAAQ,MAERyC,EAASC,GAZjB,iCAaiCD,EAASE,OAb1C,OAaYC,EAbZ,OAcMd,KAAKe,mBACLC,QAAQC,IAAI,UAAWH,GAf7B,yCAiBiCH,EAASE,OAjB1C,QAmBM,IAAWK,KAFLJ,EAjBZ,OAoBc1C,EAAO4B,KAAKhC,MAAMG,SAAS+C,GAAKzF,cAAcW,YACpD8B,EAAQ,CAAEE,KAAMA,EAAM+C,QAASL,EAAaI,IArBpD,QAyBIlB,KAAKV,SAAS,CAAErB,WAAW,EAAOC,MAAOA,IAzB7C,kDA2BI8C,QAAQC,IAAR,MAEAjB,KAAKV,SAAS,CAAErB,WAAW,EAAOC,MAAO,CAAEE,KAAM,SAAU+C,QAAS,mBA7BxE,0D,qFAiCA,WACE,IAAMtB,EAAI,eAAQG,KAAKhC,MAAMG,UAE7B,IAAK,IAAM2B,KAAWE,KAAKhC,MAAMG,SAAU,CACzC,IAAM+B,EAAK,eAAQL,EAAKC,IAER,SAAZA,IAEgCI,EAAMxE,MAA1B,qBAAZoE,EAA8C,WAC/B,GAEnBD,EAAKC,GAAWI,GAGlBF,KAAKV,SAAS,CAAEnB,SAAU0B,M,oBAG5B,WAAU,IAAD,OACDuB,EAAe,GAErB,IAAK,IAAMtB,KAAWE,KAAKhC,MAAMG,SAAU,CACzC,IAAM+B,EAAQF,KAAKhC,MAAMG,SAAS2B,GAC5BC,EAAgBG,EAAMzC,SAEvBD,EAAiBuC,EAAeC,KAAKhC,MAAMN,iBAEhD0D,EAAaC,KAAK,CAChB7F,GAAIsE,EACJwB,OAAQpB,IAIZ,IAAMqB,EAAmBH,EAAapF,KAAI,SAAAwF,GACxC,MAA8CA,EAAYF,OAAlDjF,EAAR,EAAQA,YAAaZ,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,MACpC,OACE,cAAC,EAAD,CAEEF,GAAIgG,EAAYhG,GAChBa,YAAaA,EACbZ,cAAeA,EACfC,MAAOA,EACPE,QAAS,SAAAkD,GAAK,OAAI,EAAKD,mBAAmBC,EAAO0C,EAAYhG,KAC7DH,SAAUmG,EAAYF,OAAO7E,SAAW+E,EAAYF,OAAOhD,WANtDkD,EAAYhG,OAWvB,OACE,qBAAKR,UAAU,eAAf,SACE,uBAAMA,UAAU,OAAOyG,SAAUzB,KAAKR,cAAtC,UACE,sBAAKxE,UAAU,oBAAf,UACE,qBAAKA,UAAU,aAAa0G,IAAKC,EAAWC,IAAI,SAChD,qBAAK5G,UAAU,aAAa0G,IAAKG,EAAWD,IAAI,QAElD,oBAAI5G,UAAU,cAAd,oBACCuG,EACAvB,KAAKhC,MAAME,OACV,oBAAGlD,UAAU,cAAb,UACGgF,KAAKhC,MAAME,MAAME,KADpB,KAC4B4B,KAAKhC,MAAME,MAAMiD,WAG9CnB,KAAKhC,MAAMC,UAAY,cAAC,EAAD,IAAc,cAAC,EAAD,CAAQhD,UAAW+E,KAAKhC,MAAMvB,QAA9B,6B,GA9R7BqF,aCDJC,MARf,WACE,OACE,qBAAK/G,UAAU,MAAf,SACE,cAAC,EAAD,OCMSgH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76021468.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Button.scss\";\r\n\r\nconst Button = props => (\r\n  <button className=\"button\" disabled={props.disabled}>\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nimport \"./Field.scss\";\r\n\r\nconst Field = props => {\r\n  let classes = \"field__input\";\r\n\r\n  if (props.invalid) classes += \" field__input--invalid\";\r\n\r\n  const fieldTemplates = {\r\n    input: () => (\r\n      <input\r\n        className={classes}\r\n        id={props.id}\r\n        {...props.elementConfig}\r\n        value={props.value}\r\n        onChange={props.changed}\r\n        required\r\n      />\r\n    ),\r\n    select: () => (\r\n      <select className=\"field__input field__input--select\" id={props.id} value={props.value} onChange={props.changed}>\r\n        {props.elementConfig.options.map(option => (\r\n          <option className=\"field__option\" key={option.value} value={option.value}>\r\n            {option.displayValue}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    ),\r\n  };\r\n\r\n  let fieldElement = (\r\n    <>\r\n      <label className=\"field__label\" htmlFor={props.id}>\r\n        {props.elementConfig.placeholder}\r\n      </label>\r\n      {fieldTemplates[props.elementType]()}\r\n    </>\r\n  );\r\n\r\n  return fieldElement;\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\n\nimport \"./Spinner.scss\";\n\nconst Spinner = props => <div className=\"loader\">Loading...</div>;\n\nexport default Spinner;\n","export const checkFieldValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (rules.isRequired) {\r\n    isValid = value.toString().trim() !== \"\" && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n\r\n  if (rules.min) {\r\n    isValid = value >= rules.min && isValid;\r\n  }\r\n\r\n  if (rules.max) {\r\n    isValid = value <= rules.max && isValid;\r\n  }\r\n\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  if (rules.isFloat) {\r\n    const testedValue = parseFloat(value);\r\n    isValid = !isNaN(testedValue) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n\r\nexport const convertToNumber = input => {\r\n  return Number(input);\r\n};\r\n\r\nexport const formatTime = time => {\r\n  if (time.length < 8) return time + \":00\";\r\n  else return time;\r\n};\r\n\r\nexport const isProperCategory = (category, globalCategory) => {\r\n  if (category === \"default\" || category === globalCategory) return true;\r\n\r\n  return false;\r\n};\r\n\r\nexport const formatFieldValue = (value, type) => {\r\n  let formattedValue = value;\r\n\r\n  if (type === \"number\") formattedValue = convertToNumber(value);\r\n\r\n  return formattedValue;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.ed5ad038.svg\";","export default __webpack_public_path__ + \"static/media/wave.40eb006e.svg\";","import React, { Component } from \"react\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport Field from \"../../components/Field/Field\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\n\r\nimport { checkFieldValidity, formatTime, isProperCategory, formatFieldValue } from \"../../shared/utility\";\r\n\r\nimport \"./Form.scss\";\r\n\r\nimport logoImage from \"../../assets/svg/logo.svg\";\r\nimport waveImage from \"../../assets/svg/wave.svg\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    isValid: false,\r\n    globalCategory: \"pizza\",\r\n    error: null,\r\n    dishForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Dish Name\",\r\n          minLength: \"2\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          isRequired: true,\r\n          minLength: 2,\r\n        },\r\n        isValid: false,\r\n        isTouched: false,\r\n        category: \"default\",\r\n      },\r\n      preparation_time: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"time\",\r\n          placeholder: \"Preparation Time\",\r\n          step: \"1\",\r\n        },\r\n        value: \"00:00:00\",\r\n        validation: {\r\n          isRequired: true,\r\n        },\r\n        isValid: false,\r\n        isTouched: false,\r\n        category: \"default\",\r\n      },\r\n      type: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"pizza\", displayValue: \"Pizza\" },\r\n            { value: \"soup\", displayValue: \"Soup\" },\r\n            { value: \"sandwich\", displayValue: \"Sandwich\" },\r\n          ],\r\n          placeholder: \"Dish Type\",\r\n        },\r\n        value: \"pizza\",\r\n        validation: {\r\n          isRequired: true,\r\n        },\r\n        isValid: true,\r\n        isTouched: false,\r\n        category: \"default\",\r\n      },\r\n      no_of_slices: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"Number of Slices\",\r\n          min: 1,\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          isRequired: true,\r\n          isNumeric: true,\r\n          min: 1,\r\n        },\r\n        isValid: false,\r\n        isTouched: false,\r\n        category: \"pizza\",\r\n      },\r\n      diameter: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"Diameter\",\r\n          step: \"0.01\",\r\n          min: \"0.01\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          isRequired: true,\r\n          isFloat: true,\r\n          min: 0.01,\r\n        },\r\n        isValid: false,\r\n        isTouched: false,\r\n        category: \"pizza\",\r\n      },\r\n      spiciness_scale: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"Spiciness Scale\",\r\n          min: \"1\",\r\n          max: \"10\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          isRequired: true,\r\n          isNumeric: true,\r\n          min: 1,\r\n          max: 10,\r\n        },\r\n        isValid: false,\r\n        isTouched: false,\r\n        category: \"soup\",\r\n      },\r\n      slices_of_bread: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"Slices of Bread \",\r\n          min: \"1\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          isRequired: true,\r\n          isNumeric: true,\r\n          min: 1,\r\n        },\r\n        isValid: false,\r\n        isTouched: false,\r\n        category: \"sandwich\",\r\n      },\r\n    },\r\n  };\r\n\r\n  fieldChangeHandler = (event, formElementID) => {\r\n    const updatedDishForm = { ...this.state.dishForm };\r\n    const updatedFormElement = { ...updatedDishForm[formElementID] };\r\n\r\n    const fieldType = updatedFormElement.elementConfig.type;\r\n    const fieldValue = formatFieldValue(event.target.value, fieldType);\r\n\r\n    updatedFormElement.isValid = checkFieldValidity(fieldValue, updatedFormElement.validation);\r\n    updatedFormElement.value = fieldValue;\r\n    updatedFormElement.isTouched = true;\r\n\r\n    updatedDishForm[formElementID] = updatedFormElement;\r\n\r\n    let updatedGlobalCategory = this.state.globalCategory;\r\n    if (formElementID === \"type\") updatedGlobalCategory = updatedFormElement.value;\r\n\r\n    this.setState({\r\n      dishForm: updatedDishForm,\r\n      globalCategory: updatedGlobalCategory,\r\n      isValid: this.isFormValid(updatedDishForm, updatedGlobalCategory),\r\n    });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault();\r\n    if (!this.state.isValid) return;\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    let dataToSend = this.giveDataToSend();\r\n    this.sendDishData(dataToSend);\r\n  };\r\n\r\n  isFormValid(form, globalCategory) {\r\n    let isFormValid = true;\r\n    for (let fieldID in form) {\r\n      const fieldCategory = this.state.dishForm[fieldID].category;\r\n\r\n      if (!isProperCategory(fieldCategory, globalCategory)) continue;\r\n\r\n      isFormValid = form[fieldID].isValid && isFormValid;\r\n    }\r\n\r\n    return isFormValid;\r\n  }\r\n\r\n  giveDataToSend() {\r\n    const dataToSend = {};\r\n\r\n    for (const fieldID in this.state.dishForm) {\r\n      const field = this.state.dishForm[fieldID];\r\n      const fieldCategory = field.category;\r\n\r\n      if (!isProperCategory(fieldCategory, this.state.globalCategory)) continue;\r\n\r\n      if (fieldID === \"preparation_time\") dataToSend[fieldID] = formatTime(field.value);\r\n      else dataToSend[fieldID] = field.value;\r\n    }\r\n\r\n    return dataToSend;\r\n  }\r\n\r\n  async sendDishData(data) {\r\n    try {\r\n      const response = await fetch(\"https://frosty-wood-6558.getsandbox.com:443/dishes\", {\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      });\r\n\r\n      let error = null;\r\n\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        this.resetFieldsValue();\r\n        console.log(\"Success\", responseData);\r\n      } else {\r\n        const responseData = await response.json();\r\n\r\n        for (const key in responseData) {\r\n          const name = this.state.dishForm[key].elementConfig.placeholder;\r\n          error = { name: name, message: responseData[key] };\r\n        }\r\n      }\r\n\r\n      this.setState({ isLoading: false, error: error });\r\n    } catch (fetchError) {\r\n      console.log(fetchError);\r\n\r\n      this.setState({ isLoading: false, error: { name: \"Server\", message: \"Unknown Error\" } });\r\n    }\r\n  }\r\n\r\n  resetFieldsValue() {\r\n    const form = { ...this.state.dishForm };\r\n\r\n    for (const fieldID in this.state.dishForm) {\r\n      const field = { ...form[fieldID] };\r\n\r\n      if (fieldID === \"type\") continue;\r\n\r\n      if (fieldID === \"preparation_time\") field.value = \"00:00:00\";\r\n      else field.value = \"\";\r\n\r\n      form[fieldID] = field;\r\n    }\r\n\r\n    this.setState({ dishForm: form });\r\n  }\r\n\r\n  render() {\r\n    const formElements = [];\r\n\r\n    for (const fieldID in this.state.dishForm) {\r\n      const field = this.state.dishForm[fieldID];\r\n      const fieldCategory = field.category;\r\n\r\n      if (!isProperCategory(fieldCategory, this.state.globalCategory)) continue;\r\n\r\n      formElements.push({\r\n        id: fieldID,\r\n        config: field,\r\n      });\r\n    }\r\n\r\n    const elementsToRender = formElements.map(formElement => {\r\n      const { elementType, elementConfig, value } = formElement.config;\r\n      return (\r\n        <Field\r\n          key={formElement.id}\r\n          id={formElement.id}\r\n          elementType={elementType}\r\n          elementConfig={elementConfig}\r\n          value={value}\r\n          changed={event => this.fieldChangeHandler(event, formElement.id)}\r\n          invalid={!formElement.config.isValid && formElement.config.isTouched}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"form-wrapper\">\r\n        <form className=\"form\" onSubmit={this.submitHandler}>\r\n          <div className=\"form__decorations\">\r\n            <img className=\"form__wave\" src={waveImage} alt=\"logo\" />\r\n            <img className=\"form__logo\" src={logoImage} alt=\"\" />\r\n          </div>\r\n          <h1 className=\"form__title\">Dishes</h1>\r\n          {elementsToRender}\r\n          {this.state.error && (\r\n            <p className=\"form__error\">\r\n              {this.state.error.name}: {this.state.error.message}\r\n            </p>\r\n          )}\r\n          {this.state.isLoading ? <Spinner /> : <Button disabled={!this.state.isValid}>Submit</Button>}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import \"./App.scss\";\nimport Form from \"./containers/Form/Form\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}